extension GroundFloorMass --> GroundFloorMass.
extension LowerTierFloorMass --> LowerTierFloorMass.
extension UpperTierFloorMass --> UpperTierFloorMass.
extension TopFloorMass --> TopFloorMass.

import Setback_Labels : "Imports/Setback_Labels.cga"

@Hidden
import _Upper_Tier_Setback : "Zoning/Setback_Hidden.cga" (
	Remainder --> UpperTier,
	Enabled = Stepback_Enabled,
	Reference = Stepback_Reference,
	Setback_All = Stepback_All,
	Setback_Front = Stepback_Front,
	Setback_Left = Stepback_Left,
	Setback_Right = Stepback_Right,
	Setback_Rear = Stepback_Rear
)

@Group("Lower Tier", 10)
@Order(10)
@Range(min=1, max=10)
attr Ground_Floor_Height = 4.0

@Order(11)
@Range(min=1, max=10)
attr Floor_Height = 3.0


@Group("Upper Tier", 20)
@Order(20)
@Handle(shape=Handle_N_Floors_Upper., axis=y, reference=center, slip=inside)
@Range(min=0, max=40, stepsize=1)
attr Upper_Tier_N_Floors = 1

@Order(21)
@Range(min=1, max=10)
attr Upper_Tier_Floor_Height = 2.6


@Group("Upper Tier Stepbacks", 30)
@Order(30)
attr Stepback_Enabled = true

@Order(31)
@Enum(valuesAttr=Setback_Labels.labels)
attr Stepback_Reference = Setback_Labels.setbackTags

@Order(32)
@Handle(shape=Handle_Stepback_All., axis=y, reference=center, slip=inside)
@Range(min=0, max=50, stepsize=0.1, restricted=false)
attr Stepback_All = 1.0

@Order(33)
@Handle(shape=Handle_Stepback_Front., axis=z, reference=edge, slip=inside, occlusion=false)
@Range(min=0, max=50, stepsize=0.1, restricted=false)
attr Stepback_Front = 3

@Order(34)
@Range(min=0, max=50, stepsize=0.1, restricted=false)
attr Stepback_Left = 0.0

@Order(35)
@Range(min=0, max=50, stepsize=0.1, restricted=false)
attr Stepback_Right = 0.0

@Order(36)
@Range(min=0, max=50, stepsize=0.1, restricted=false)
attr Stepback_Rear = 0.0

@Hidden
attr _upperTierHeight = 0

const epsilon = 0.01

start Start with(
	hullHeight := scope.sy
	upperTierHeight := min(
		Upper_Tier_N_Floors * Upper_Tier_Floor_Height, 
		Upper_Tier_Floor_Height * floor(epsilon + hullHeight / Upper_Tier_Floor_Height)
	)
	heightAvailableForRegularFloors := epsilon + hullHeight - Ground_Floor_Height - upperTierHeight
	nRegularFloors := 
		case heightAvailableForRegularFloors < 0:
			0
		else:
			floor(heightAvailableForRegularFloors / Floor_Height)
	nGroundFloors := case heightAvailableForRegularFloors > 0: 1 else: 0
	lowerTierHeight := nGroundFloors * Ground_Floor_Height + nRegularFloors * Floor_Height
)-->
	comp(f){
		bottom: 
			[case lowerTierHeight > 0: LowerTier(lowerTierHeight) else: NIL]
			t(0, 0, -lowerTierHeight)
			set(_upperTierHeight, upperTierHeight)
			[case upperTierHeight > 0: _Upper_Tier_Setback.start else: NIL]
	}


LowerTier(tierHeight) -->
	extrude(world.up, tierHeight)
	split(y){
		Ground_Floor_Height: GroundFloorMass |
		{
			Floor_Height: LowerTierFloorMass
		}* |
		(case Upper_Tier_N_Floors == 0: Floor_Height else: 0): TopFloorMass
	}


UpperTier -->
	extrude(world.up, _upperTierHeight)
	split(y){
		{
			Upper_Tier_Floor_Height: UpperTierFloorMass
		}* |
		Upper_Tier_Floor_Height: TopFloorMass
	}
