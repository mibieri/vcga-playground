extension Parcels --> Parcels.
extension Surroundings --> color("#CCFFCC") Surroundings.

@Order(1)
@Range(min=1, max=100, stepsize=0.1, restricted=false)
attr Footprint_Size_X = 12

@Order(2)
@Range(min=1, max=100, stepsize=0.1, restricted=false)
attr Footprint_Size_Z = 12

@Order(3)
@Range(min=0, max=100, stepsize=0.1, restricted=false)
attr Row_Inner_Distance = 30

@Order(4)
@Range(min=0, max=100, stepsize=0.1, restricted=false)
attr Row_Border_Distance = 10

@Order(5)
@Range(min=1, max=10, stepsize=1, restricted=false)
attr Parcels_Per_Group = 2

@Order(6)
@Range(min=0, max=100, stepsize=0.1, restricted=false)
attr Group_Inner_Distance = 30

@Order(7)
@Range(min=0, max=100, stepsize=0.1, restricted=false)
attr Group_Border_Distance = 15

@Order(8)
attr Exact_Distances = false

@Order(9)
@Angle
attr Grid_Rotation = 0

isRectangular() = geometry.area >= (scope.sx * scope.sz - 0.1)

exactRowInnerDistance() = case Exact_Distances: Row_Inner_Distance else: 0
floatingRowInnerDistance() = case !Exact_Distances: Row_Inner_Distance else: 0
exactRowBorderDistance() = case !Exact_Distances: Row_Border_Distance else: 0
floatingRowBorderDistance() = case Exact_Distances: Row_Border_Distance else: 0

exactGroupInnerDistance() = case Exact_Distances: Group_Inner_Distance else: 0
floatingGroupInnerDistance() = case !Exact_Distances: Group_Inner_Distance else: 0
exactGroupBorderDistance() = case !Exact_Distances: Group_Border_Distance else: 0
floatingGroupBorderDistance() = case Exact_Distances: Group_Border_Distance else: 0

start Start -->
	rotateScope(0, Grid_Rotation, 0)
	SplitIntoRows


SplitIntoRows-->
	split(z, noAdjust){
		Row_Border_Distance: Surroundings |
		{ 
			Footprint_Size_Z: SplitRowIntoGroups |  
			exactRowInnerDistance(): Surroundings | 
			~floatingRowInnerDistance(): Surroundings
		} * |
		Footprint_Size_Z: SplitRowIntoGroups |
		exactRowBorderDistance(): Surroundings |
		~floatingRowBorderDistance(): Surroundings
	}


SplitRowIntoGroups -->
	split(x, noAdjust){
		Group_Border_Distance: Surroundings |
		{ 
			Footprint_Size_X * Parcels_Per_Group: Group |  
			exactGroupInnerDistance(): Surroundings |
			~floatingGroupInnerDistance(): Surroundings
			
		} * |
		Footprint_Size_X * Parcels_Per_Group: Group |
		~floatingGroupBorderDistance(): Surroundings |
		exactGroupBorderDistance(): Surroundings
	}

	
Group -->
	case isRectangular():
		split(x){
			~Footprint_Size_X: Parcels
		}*
	else:
		Surroundings
		