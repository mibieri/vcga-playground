extension Parcels --> Parcels.
extension Surroundings --> NIL

@Order(1)
@Range(min=1, max=100, stepsize=0.1, restricted=false)
attr Cell_Size_X = 30

@Order(2)
@Range(min=1, max=100, stepsize=0.1, restricted=false)
attr Cell_Size_Z = 20

@Order(3)
@Range(min=1, max=100, stepsize=0.1, restricted=false)
attr Offset_X = 30

@Order(4)
@Range(min=1, max=100, stepsize=0.1, restricted=false)
attr Offset_Z = 20

@Order(5)
@Angle
attr Grid_Rotation = 0

@Order(6)
attr Interleaved = false

@Order(7)
attr Exact_Cell_Size = true

@Order(8)
@Percent
attr Minimal_Cell_Area = 1.0


@Order(9)
@Range(min=1, max=100, stepsize=0.1, restricted=false)
attr Border_Margin = 0


getRowIndex() = floor(0.5 + (-scope.tz - Offset_X) / Cell_Size_X)
getColIndex() = floor(0.5 + (scope.tx - Offset_Z) / Cell_Size_Z)

	
start Start -->
	print(Cell_Size_X)
	rotateScope(0, Grid_Rotation, 0)
	setback(Border_Margin){
		all: Surroundings |
		remainder: SplitIntoCols
	}
	
SplitIntoCols -->
	case Exact_Cell_Size:
		split(z, noAdjust){
			(Offset_Z + 1000 * Cell_Size_Z) % Cell_Size_Z: SplitIntoRows |
			{ Cell_Size_Z: SplitIntoRows } * |
			~1: SplitIntoRows
		}
	else:
		split(z, noAdjust){ 
			~Cell_Size_Z: SplitIntoRows 
		}*

SplitIntoRows with(
	forward := !Interleaved || (split.index % 2 == 0)
) -->
	case Exact_Cell_Size:
		split(x, noAdjust){
			~(case !forward: 1 else: 0): GridCell |
			(case forward: (Offset_X + 1000 * Cell_Size_X) % Cell_Size_X else: 0): GridCell |
			{ Cell_Size_X: GridCell }* |
			~(case forward: 1 else: 0): GridCell |
			(case !forward: (Offset_X + 1000 * Cell_Size_X) % Cell_Size_X else: 0): GridCell
		}
	else:
		split(x, noAdjust){
			(case forward: Offset_X else: 0): GridCell |
			{~Cell_Size_X: GridCell}* |
			(case !forward: Offset_X else: 0): GridCell
		}

	
GridCell -->
	case geometry.area + 0.1 < Minimal_Cell_Area * Cell_Size_X * Cell_Size_Z:
		Surroundings
	else:
		Parcels
		
